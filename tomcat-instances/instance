#!/bin/bash

[[ 0 -ne $EUID ]] && echo "root access required" && exit 1

set -e
cwd="$(dirname $0)"

# TODO : search into existing instances ports (not only available, since they may not be started

findFreePort (){
   port=${1:-1}
   free=0
   while [ 0 -eq $free ]; do
      nc -z localhost $port && free=0 || free=1
      port=$(($port+1))
   done
   echo $port
}

findJavaHome (){
   # TODO : fallback on jre when jdk is not available
   defaultJava=$(readlink -e $(which javac))
   defaultJava="${defaultJava%/bin/javac}"
   javaHome="${JAVA_HOME:-$defaultJava}"
   echo $javaHome
}

# parameters
# - instance name
# - delete files (defaults to false)
delete (){
   # allow to delete instance if it exists
   # remove service
   # follow link to find instance files
   echo delete
}

# parameters
# - target folder (defaults to /tmp/tomcat)
# - tomcat version (defaults to 6.0.xx version)
# - mirror base url (defaults to ircam mirror)
download (){
   folder="${1:-/tmp}"
   targetFolder="$folder/tomcat"
   version="${2:-6.0.37}"
   mirror="${3:-http://mirrors.ircam.fr/pub/apache/tomcat}"
   majorVersion="${version%%.*}"
   archive="apache-tomcat-${version}.zip"
   targetArchive="$folder/$archive"

   url="$mirror/tomcat-${majorVersion}/v$version/bin/$archive"

   mkdir -p $(dirname "$targetArchive")
   tmpArchive="/tmp/$archive"
   [ -e "$tmpArchive" ] || wget -q "$url" -O "$tmpArchive"

   # TODO : download and check archive signature
   # bypass archive download if file exists and signature is ok

   [ -d "$targetFolder" ] && rm -rf "$targetFolder"

   rm -rf "${targetArchive%%.zip}"
   unzip -q "$tmpArchive" -d "$folder"
   mv "${targetArchive%%.zip}" "$targetFolder"

   cp -rf "$cwd/../tomcat${majorVersion}/conf" "$targetFolder"

   chmod ugo+x "$targetFolder"/**/*.sh

}

# parameters
# - instance name
# - folder where to create instance
create (){
   name="$1"
   instanceRoot="$2"
    
   instance="tomcat-$name"          # instance folder name
   folder="$instanceRoot/$instance" # instance folder path

   # -- Step 1 : copy instance from template

   [ ! -e "$folder" ] \
      || echo "target folder already exists : $folder" || return 1

   # TODO : avoid using template for creation
   [ -e _template/tomcat ] \
      || echo "template not found, please run _template/create first" || return 1

   rm -rf "$folder"
   download "$folder"

   echo "instance path : $folder"

   # -- Step 2 : configure instance --

   # find open port(s)
   httpPort=$(findFreePort 8080)
   stopPort=$(findFreePort 8005)

   echo "instance ports : stop=$stopPort http=$httpPort"

   # reconfigure instance ports
   sed \
      -e "s/port=\"8005\"/port=\"$stopPort\"/g" \
      -e "s/port=\"8080\"/port=\"$httpPort\"/g" \
      -i "$folder/tomcat/conf/server.xml"

   javaHome="$(findJavaHome)"

   echo "java home : $javaHome"

   service $instance stop 2>/dev/null

   # add start script into /etc/init.d/
   startupScript="/etc/init.d/${instance}"
   cat $cwd/service | sed \
      -e 's+#INSTANCE_PATH#+'$folder'+' \
      -e 's+#INSTANCE_NAME#+'$instance'+' \
      -e 's+#JAVA_HOME#+'$javaHome'+' \
      > $startupScript
   chmod ugo+x $startupScript

   # configure automatic startup
   update-rc.d -f "$instance" remove >/dev/null
   update-rc.d "$instance" defaults >/dev/null

   echo "service & startup config added : $startupScript"

   # TODO : allow to have a non-root context

   echo -e "
      <Location /$name/>
         ProxyPass        http://localhost:$httpPort/
         ProxyPassReverse http://localhost:$httpPort/
      </Location>
      " > $folder/apache-proxy.conf

   echo -e "
      make sure that your apache configuration includes link to proxy configuration :
      IncludeOptional $instanceRoot/tomcat-*/apache-proxy.conf
   "
   service $instance start

   apachectl graceful
}

usage (){
   echo -e "
    usage:

    $0 usage : display this help
    $0 template <folder> : create instance template from tomcat archive
    $0 create <name> <folder> : create instance 'name' in parent folder 'folder'
    $0 delete <name> : delete existing instance 'name' if it exists (does not delete instance files yet)
   "
}

# parameters
action="${1:-usage}"               # action : create|delete|usage, defaults to usage
name="${2:-instance}"              # instance name
instanceRoot="${3:-$(dirname $0)}" # where to create instance, defaults to current script location
templateRoot="${3:-$(dirname $0)/_template}" 

case "$action" in
   usage) 
      usage 
      ;;
   create) 
      create "$name" "$instanceRoot"
      ;;
   delete)
      delete "$name"
      ;;
   template)
      template "$templateRoot"
      ;;
   *) 
      echo "unknown action : $action"
      usage
      exit 1 
      ;;
esac

